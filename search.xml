<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DASCTF 10&amp;11月赛部分misc复现</title>
      <link href="/2023/12/08/dasctf-10-11-yue-sai-bu-fen-misc-fu-xian/"/>
      <url>/2023/12/08/dasctf-10-11-yue-sai-bu-fen-misc-fu-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="justpaint"><a href="#justpaint" class="headerlink" title="justpaint"></a>justpaint</h2><p>（DASCTF X CBCTF 10月月赛）FLAG被我弄丢了&gt;_&lt;不过，JBN应该记得，或许你能从他那得到一些线索。</p><p>链接：<a href="https://pan.baidu.com/s/19Iymf2mwak1PtSPyJGjZYg?pwd=DASC">https://pan.baidu.com/s/19Iymf2mwak1PtSPyJGjZYg?pwd=DASC</a> 提取码：DASC —来自百度网盘超级会员V5的分享</p><hr><p>ai题，附件包括train.py和jbn.pth，train.py文件内容如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> cv2<span class="token keyword">class</span> <span class="token class-name">JBN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>JBN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>main <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">452</span> <span class="token operator">*</span> <span class="token number">280</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Tanh<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        img <span class="token operator">=</span> self<span class="token punctuation">.</span>main<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        img <span class="token operator">=</span> img<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">452</span><span class="token punctuation">,</span> <span class="token number">280</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> img<span class="token keyword">def</span> <span class="token function">watch_flag</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'./data/data/flag.png'</span><span class="token punctuation">)</span>    gray_image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>    flag_tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>gray_image<span class="token punctuation">)</span><span class="token punctuation">)</span>    flag_tensor <span class="token operator">=</span> flag_tensor<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    img_tensor <span class="token operator">=</span> img    flag_tensor <span class="token operator">=</span> flag_tensor<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    img_tensor <span class="token operator">=</span> img_tensor<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    loss_fn <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>flag_tensor<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> img_tensor<span class="token punctuation">)</span>    <span class="token keyword">return</span> lossjbn <span class="token operator">=</span> JBN<span class="token punctuation">(</span><span class="token punctuation">)</span>g_optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>jbn<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>min_loss <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    random_noise <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    jbn_img <span class="token operator">=</span> jbn<span class="token punctuation">(</span>random_noise<span class="token punctuation">)</span>    g_optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    g_loss <span class="token operator">=</span> watch_flag<span class="token punctuation">(</span>jbn_img<span class="token punctuation">)</span>    g_loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    g_optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> g_loss <span class="token operator">&lt;</span> min_loss<span class="token punctuation">:</span>            min_loss <span class="token operator">=</span> g_loss            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>jbn<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'jbn.pth'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该程序是一个基本对抗网络生成算法模型，生成器（JBN）通过接受随机噪声作为输入生成图像，并通过watch_flag函数计算生成图像与flag图像之间的均方误差损失，将损失最小的模型保存至jbn.pth</p><p>所以我们只要将jbn.pth重新生成回img图像即可得到flag图像</p><p>exp.py如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> cv2<span class="token comment"># 定义JBN模型</span><span class="token keyword">class</span> <span class="token class-name">JBN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>JBN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>main <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">452</span> <span class="token operator">*</span> <span class="token number">280</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Tanh<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        img <span class="token operator">=</span> self<span class="token punctuation">.</span>main<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        img <span class="token operator">=</span> img<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">452</span><span class="token punctuation">,</span> <span class="token number">280</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> img<span class="token comment"># 加载JBN模型</span>jbn <span class="token operator">=</span> JBN<span class="token punctuation">(</span><span class="token punctuation">)</span>jbn<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'jbn.pth'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>jbn<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 设置模型为评估模式，不进行梯度计算</span><span class="token comment"># 生成随机噪声</span>random_noise <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token comment"># 使用生成器生成图像</span><span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    generated_img <span class="token operator">=</span> jbn<span class="token punctuation">(</span>random_noise<span class="token punctuation">)</span><span class="token comment"># 转换为numpy数组</span>generated_img_np <span class="token operator">=</span> generated_img<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 保存生成的图像为文件</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">'generated_image.png'</span><span class="token punctuation">,</span> generated_img_np <span class="token operator">*</span> <span class="token number">255.0</span><span class="token punctuation">)</span>  <span class="token comment"># 乘以255以还原到0-255的范围</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Generated image saved as generated_image.png"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后得到generated_image.png</p><p><img src="https://s2.loli.net/2023/12/08/XNQq1adj9FBZ5xH.png" alt=""></p><p>上下旋转、左右镜像后得到flag</p><p><img src="https://s2.loli.net/2023/12/08/497gdBvNLGHcDpt.png" alt=""></p><hr><h3 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h3><h5 id="Q1：什么是epoch？"><a href="#Q1：什么是epoch？" class="headerlink" title="Q1：什么是epoch？"></a>Q1：什么是epoch？</h5><p>一个epoch表示训练集被模型完整训练过一次，包含以下四个步骤：</p><p>①前向传播：将训练集样本输入模型中，计算得到模型输出</p><p>②计算损失：计算模型输出和真实标签之间的损失</p><p>③反向传播：根据损失计算梯度，并将梯度传播回模型的参数</p><p>④参数更新：使用优化算法更新模型的参数，以减少损失</p><p>在justpaint中，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示该训练过程经历了10次epoch，每次训练过程都循环生成随机噪声-&gt;通过JBN生成图像-&gt;计算损失-&gt;反向传播-&gt;更新JBN参数的步骤</p><h5 id="Q2：什么是学习率？"><a href="#Q2：什么是学习率？" class="headerlink" title="Q2：什么是学习率？"></a>Q2：什么是学习率？</h5><p>学习率是优化算法中的一个超参数（AI中的参数自动生成，超参数则需手动控制），控制每次参数更新的步长，在justpaint中，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">g_optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>jbn<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数通过Adam优化器，以0.001的学习率进行调整</p><hr><h2 id="IceTea"><a href="#IceTea" class="headerlink" title="IceTea"></a>IceTea</h2><p>（DAS X 0psu3 11月月赛）小黑喜欢喝冰红茶，被出题人发现后每天都说他喝屌丝饮料，结果小黑发现出题人也喝冰红茶，然后就往出题人的冰红茶里加了点料。</p><p>  <a href="DASCTF-10-11月赛部分misc复现\IceTea.cap">IceTea.cap</a> </p><hr><p>流量包题，首先按时间顺序追踪第一个HTTP流，发现一串Hex加密后的密文（黑色括号起始）</p><p><img src="https://s2.loli.net/2023/12/08/AxD28Og76eWLF5n.png" alt=""></p><p>遂拖入CyberChef解密，得到一个elf文件，导出</p><p><img src="https://s2.loli.net/2023/12/08/1GtYUi6N3rPsDMj.png" alt=""></p><p>导出后拖入IDA，发现存在upx加壳，用ExeinfoPE也发现有upx壳，于是进行机脱，再次拖入IDA后Shift+F12得到base64表（最下面一行）</p><p><img src="https://s2.loli.net/2023/12/08/imDMbLUOGpcZ2Yy.png" alt=""></p><p>按时间顺序追踪第三个HTTP流，发现一串base64加密后的密文，解密后得到一串指令</p><p>cd “/www/wwwroot/DAS202310.com”;./ezbase e flag.txt IceTea.txt;echo 27d667b0c949;pwd;echo f0e52b6ed</p><p>（每个HTTP流内容前URL解码后得到cmd=@eval(@base64_decode($_POST[‘k59c2ae7730483’]))，判断可能是蚁剑流量包，而蚁剑流量base64解密前要舍弃前两位字符）</p><p>可见在/www/wwwroot/DAS202310.com目录下通过ezbase将flag.txt加密成了IceTea.txt</p><p><img src="https://s2.loli.net/2023/12/08/kuEJlx8eLydDY9p.png" alt=""></p><p><img src="https://s2.loli.net/2023/12/08/QdwLACeUsnZc8Na.png" alt=""></p><p>接下来追踪第四个HTTP流，同样发现一串base64加密后的密文并与第三个HTTP流中发现的相似，解密后得到另一串指令</p><p>cd “/www/wwwroot/DAS202310.com”;cat IceTea.txt;echo 27d667b0c949;pwd;echo f0e52b6ed</p><p>可见在/www/wwwroot/DAS202310.com目录下打开了IceTea.txt，从第三个HTTP流中我们知道IceTea.txt是flag.txt加密后的密文</p><p><img src="https://s2.loli.net/2023/12/08/tqYpJUaOhiGN3EM.png" alt=""></p><p><img src="https://s2.loli.net/2023/12/08/5AFfcIm2jXpoR6C.png" alt=""></p><p>看一下Response部分对应的明文</p><p><img src="https://s2.loli.net/2023/12/08/4moi3hnBGcy5Os8.png" alt=""></p><p>得到reftqRrg4QB9zvZQzwf50xn51CZQxSf51gZPzxj5zhjF1CI75qE=应该是ezbase加密后的IceTea.txt内容</p><p>用第一个HTTP流中得到的base64表解密，得到flag</p><p><img src="https://s2.loli.net/2023/12/08/1XUqM5TKYlVRyxz.png" alt=""></p><hr><h3 id="彩蛋-1"><a href="#彩蛋-1" class="headerlink" title="彩蛋"></a>彩蛋</h3><p>如果你像我一样蠢，对第一个流量包进行Hex解密时把不是Hex密文的内容也复制进CyberChef的话，你会得到一个IDA检测得出upx壳、ExeinfoPE也检测得出upx壳、但脱壳工具坚持认为加的不是upx壳的elf</p><p><img src="https://s2.loli.net/2023/12/08/ard32xnfCN6sGWq.png" alt=""></p><p><img src="https://s2.loli.net/2023/12/08/R1spGUuw9jVNcPt.png" alt=""></p><hr>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鹏程杯决赛游记</title>
      <link href="/2023/11/24/peng-cheng-bei-jue-sai-you-ji/"/>
      <url>/2023/11/24/peng-cheng-bei-jue-sai-you-ji/</url>
      
        <content type="html"><![CDATA[<p>“<strong>两只小老鼠掉进了牛奶桶，第一只很快就放弃了被淹死了，第二只却不放弃。它猛烈挣扎，直到把牛奶都搅拌成了奶油，然后爬了出去</strong>”</p><p>也许在断网收手机的赛场坐牢的自己很像第一只可怜又无助的小鼠，但是还是希望自己能通过实打实的学习，有朝一日成为把牛奶搅拌成奶油然后爬出牛奶桶的硕鼠。</p><p>这一篇游记写来记录第一次参加线下赛坐牢的经历。</p><p><img src="https://s2.loli.net/2023/11/24/gbONlwLKjs2vrEd.jpg" alt=""></p><h2 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h2><p>通宵赶上七点的飞机，在飞机上意外地精神，于是看完了《后窗》和《城市之光》，看完后终于昏昏欲睡了，但这个时候飞机落地了。</p><p>下飞机后，不得不说，不用把自己裹成粽子被妖风冻成冰河世纪猛犸象还是很舒适的。打车前往酒店，这也是我第一次住电竞酒店。知道的知道我是来打比赛的，不知道的还以为我是来旅游的（好像还真是）</p><p>在酒店补了一下午觉，一起打了一晚上LOL，然后各自配了下比赛要用的工具和环境。由于我是零渗透经验，所以只能对着搜索引擎搜到的按图索骥，装了Xray和Goby，并手动复制了他们的使用文档到本地。</p><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>第一天是体验最好的一天，上来虽然发现Xray不会配置和使用，但是用Goby还是很轻松扫出用通达OA写的登录界面利用 phpsession绕过登录的一个漏洞……后来发现YHYJ（队友）用Wuhurribin（队友）的工具一把梭了通达OA绕过登录+木马上传的一个联动漏洞（Wuhurribin：我怎么不知道我有这个工具？），拿到了我们队本场比赛的开门红</p><p>然后是用织梦cms写的车企网站，找了很多织梦本地的漏洞都无功而返，结果发现网站的/www.zip就藏着源码没被我们扫到，解压zip又能拿到一个flag，然后发现/admin_lvqc.com_car的api指向后台登陆界面</p><p>在一万次注入失败后，f0和Wuhurribin被周公托梦到的后台的登录账号和密码（原来/admin_lvqc.com_car这个api的意思就是账号是admin密码是lvqc.com……真是够低能的），登进去又出一个flag，可惜在内网渗透的时候卡在了账户提权上，关不掉防火墙</p><p>剩下一个看得出模板的就是apache的tomcat写的深圳电网，可惜本地漏洞都试了一遍也没有进展</p><p>坚持到了最后一个小时才开始打植物大战僵尸随机模仿者版</p><p>结束后跟学长交流，发现织梦cms的后台登陆的确是用sql注入的，然后看比赛群发现tomcat的题前端进/manager/html会被403，但通过api进/manager/html就可以弱口令登录（流汗黄豆），剩下的确实是升维打击了</p><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><p>第二天是最坐牢的一天，首先几乎所有的题目环境都是ssh连接，这就意味着网页端是无法访问题目环境的，但是由于我ssh语法稀碎，所以连不上很多题目环境</p><p>一道远程桌面连接的题，首先连接卡，进去更卡，远程桌面就只有一个ProjectA的文件夹，里面的蛮多文件被恶意加密了，题目要求就是恢复被恶意加密的文件……虽然后面放出提示又告诉我可以不解密而是重新部署项目，又告诉我可以通过给出密钥的AES解密恢复，但奈何我的密码学基础比白纸薄，只能束手无策</p><p>另一道远程桌面连接的题是远程桌面服务执行代码漏洞（CVE-2019-0708），但奈何当时本地CVE里面关于这道题的CVEmarkdown都是英文版，看了半天一头雾水也不知道怎么复现，只好放弃</p><p>由于太过坐牢加上当天是S赛总决赛，所以四点左右我们就溜了（出来的时候工作人员还跟我们说开幕式没演完……）</p><h2 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h2><p>第三天是最平平无奇的一天，又有一道tomcat的题，可惜这次账号密码重置过，用弱口令攻击毫无建树，穷尽各种本地有的方法也拿不下来</p><p>队内大腿f0这边在企业系统的题中通过Cookie参数上传了个木马，连上了目标服务器，由于这个系统环境只给五个端口但是有60多支队伍要打，所以连的时候卡得心态扭曲了，后续连上后直接开始植物大战僵尸，疯狂抵御各队伍传马连马的攻势，成功守护住了戴夫的后院，直到因为有人恶意破坏环境导致防守方被迫溯源重置环境才结束（赛后比赛群：防守方删马删得好快）</p><p>这也是当天唯一的进展，后续摆烂后干脆连机打起了三国杀2V2（名场面：Wuhurribin对队友的无中生友打出无懈可击，老戏骨名不虚传）</p><p><img src="https://s2.loli.net/2023/11/24/kVUqni13vpF6eNC.jpg" alt=""></p><p>打完就是摸鱼时间，队友在深圳疯狂享受夜生活，我则回了趟家。</p><p>不在学校的好处就是，你看着车水马龙的象牙塔外的世界，比起你在大学校园里N点一线的行动路径，更能激发你对一些问题的思考，比如到底该不该继续摆下去、自己想要的到底是什么……（这些问题的思考也都是浅思拙见，以后再想起来的时候有空再写几篇）</p><p>至此，这场线下赛也是划上了一个句号，能收获15个G的工具和漏洞库，开阔眼界，我也受益良多。后续会更新这场线下赛我接触到的所有漏洞的复现（因为题目环境复现不了了），也希望自己能在不断地学习和比赛过后变成那只能把牛奶搅成奶油的老鼠。</p><p><img src="https://s2.loli.net/2023/11/24/5QghHB6AMULfkE1.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python函数的位置参数和关键词参数</title>
      <link href="/2023/09/29/python-han-shu-de-wei-zhi-can-shu-he-guan-jian-ci-can-shu/"/>
      <url>/2023/09/29/python-han-shu-de-wei-zhi-can-shu-he-guan-jian-ci-can-shu/</url>
      
        <content type="html"><![CDATA[<p>Python函数有两种参数：位置参数和关键词参数。位置参数可以不指定传入参数名，但是不能调换传参的先后顺序；关键词参数必须指定传入参数名，可以调换传参的先后顺序</p><p>比如：<br></p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def register(Username,Password):    ...    register('C26H52','123456')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>这就是典型的位置传参，读取到的’C26H52’就是Username，’123456’就是Password<p></p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def register(Username,Password):    ...    register(Password='123456',Username='C26H52')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是典型的关键词传参，根据参数名读取后’C26H52’作为Username传入，’123456’作为Password传入</p><p>Python参数中有两种分隔符：/和<em>，/分隔符之前传入的参数仅限位置参数，</em>分隔符之后传入的参数仅限关键词参数，这两个分隔符中间的参数是位置或关键词参数<br>譬如<br></p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def register(Username,/,Password,*,Name):    ...    #按这样定义的函数，Username一定要位置传参，Name一定要关键词传参，Password作自由选择    register('C26H52','123456',Name='cjy') #正确示例    register(Username='C26H52',Password='123456','cjy') #错误示例，Username只能位置传参，Name只能关键词传参<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>Python在函数定义的时候可以给参数设置默认值（default）<br></p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def register(Username='C26H52',/,Password='123456',*,Name='cjy'):    ...        register() #Username='C26H52',Password='123456',Name='cjy'    register(Username='Q_T',Password='654321',Name='jb') #Username='Q_T',Password='654321',Name='jb'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>如果给一个仅位置参数设定默认值，那么该参数以后所有的仅位置/位置或关键字参数都必须设置默认值<br></p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def register(Username='C26H52',/,Password='123456',*,Name='cjy') #正确示例def register(Username='C26H52',/,Password,*,Name='cjy') #错误示例，由于Username有默认值，Password必须也要设置默认值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p></p><p><strong>defaults</strong>是函数的内置属性，function.<strong>defaults</strong>从左到右表示function函数非仅关键字参数的默认值（仅关键字参数的位置显示空白）<br>如<br></p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def func1(a=1,b=2,c=3):    passdef func2(a=1,/,b=2,*,c=3):    passprint(func1.__defaults__) #(1,2,3)print(func2.__defaults__) #(1,2,)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>而<strong>kwdefaults</strong>则是另一个内置属性，function.<strong>kwdefaults</strong>从左到右表示function函数仅关键字参数的默认值（以键值对的形式存储）<br>如<br></p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def func1(a=1,b=2,c=3):    passdef func2(a=1,/,b=2,*,c=3):    passprint(func1.__defaults__) #Noneprint(func2.__defaults__) #{'c':3}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高考</title>
      <link href="/2023/06/08/gao-kao/"/>
      <url>/2023/06/08/gao-kao/</url>
      
        <content type="html"><![CDATA[<p>一年前的高考第一天，2022年6月7日中午，我在宿舍打开了一把三国杀对局，选了个曹操，然后在一局内被闪电劈中三次（“劈中”是指随便翻开一张未知的牌，花色是♠2~9，效果是会对当前角色造成3点伤害）。午睡醒后，我把这事分享给我的舍友，他们告诉我，“你下午考数学肯定要起飞了”</p><p>2022年6月7日下午，我经历了整个高考三天最折磨的两个小时：从第一道数列题开始，六道大题，第二问基本毫无思路，无从下笔。</p><p>虽说“人难我难，我不畏难”，但对未知的东西感到恐惧，是人的天性：可能你苦思冥想也百思不得其解的题，你身边的人电光火石间就能解决，即使你不认为他的实力比你强多少。</p><p>在对考试结果未知的恐慌与焦虑中，我像挤牙膏一般填满了答题卡空白的每个角落。收卷铃打响的那一刻，我松开握着的笔，双手张开，等待着监考老师收齐试卷和答题卡，等待着命运女神审判我的高考。</p><p>——这就是一年前的高考在我的脑海里留下的最深刻的回忆，至于结果，只能说感觉不尽如人意：没有哪科在看到成绩后会发出“哇我这科居然超常发挥了”的惊叹，倒是有的科看完成绩，一直在反思为什么和预期的结果相差了十万八千里。</p><p>对我的成绩满意吗？可能永远也不会满意。时至今日，我也无法忘却我查分时的那种失望，那种感觉就像是你幻想着即将喝到一杯甜甜糯糯的奶茶，结果嘬一口，只尝到了苦瓜汁，心中只剩植物大战僵尸里面僵尸咬到大蒜的苦涩感。</p><p>那我会悔恨当初吗？其实也不会，倒不是说我没感觉到遗憾，正相反，我觉得高考给我留下了无尽的遗憾。但是悔恨感和遗憾感是虚浮的，是无力的，是无法指导我们解决现实问题的。记得王安石在游览完褒禅山后，提笔写下一句“尽吾志也而不能至者，可以无悔矣，其孰能讥之乎”。是的，可以说我或许再努力些，故事的结局会截然不同。但或许，在千千万万个平行时空中，总会在时间线上发生这样那样的事，改变叙事的进程，让结局回归最后既定的事实。而我的勤耕不缀并没有对不起我的初心与抱负，那即使登不到山顶，也无妨和自己和解，流连于半山腰，欣赏独属于自己的那份风景吧。</p><p>时间是残忍的，听一百遍《反方向的钟》，也不能改变2018年10月20号rng的基地被g2推平的事实；把时针逆向拨一百圈，也无法阻止ame的水人在og高地反向波葬送lgd冠军梦。至少在时光机发明以前，你我都不能回溯到过往的某段时空，无论这段时空是像黄金一般令人神往的甜蜜的回忆，还是像石块一样令人不堪回首的苦涩曾经，你都只能驻足，观望，而做不到挽留或者扭转。</p><p>——那就放下它，继续自己本应该走完的旅程吧。</p><p>2023年6月10号的1点14分，这一刻，应该绝大多数高考生都已笔尖合盖，刀剑入鞘。愿各位圆梦理想的大学，也祝福大家都将高考作为旅途上别致的风景，在步入大学的校园后，依然乐观向前，依然相信明天和远方。<br>——“如果再也不能见到你，祝你早安，午安，晚安。”</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C26H52的新手村入门心得</title>
      <link href="/2023/01/02/1/"/>
      <url>/2023/01/02/1/</url>
      
        <content type="html"><![CDATA[<p>失败总是贯穿人生始终，这就是人生</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;iostream&gt;using namespace std;int main(){    cout&lt;&lt;"Hello CTF"&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
